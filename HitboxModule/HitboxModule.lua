local RunService = game:GetService("RunService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

local LivingHitboxes = workspace:WaitForChild("LivingHitboxes")

local HitboxModule = {}
HitboxModule.__index = HitboxModule

--//Detecting Who Was Hit\\--
function HitboxModule.GetPlayerHit(Hitbox)
	local HitboxOwner = Hitbox:FindFirstChild("Owner")
	if not HitboxOwner then return end
	
	return HitboxOwner.Value
end

--//HitboxModule\\--
function HitboxModule.new(WeldPart, Offset, Size, Excluded)
	local self = {}

	--//Creating The Hitbox\\--
	local HitEvent = Instance.new("BindableEvent")
	HitEvent.Name = "HitEvent"

	local Hitbox = Instance.new("Part")
	Hitbox.Size = Vector3.new(3,6,5)
	Hitbox.Parent = workspace.Hitboxes
	Hitbox.CanCollide = false
	Hitbox.Massless = true
	Hitbox.Transparency = 0.75
	
	Hitbox.BrickColor = BrickColor.new("Really red")

	local Weld = Instance.new("Weld", Hitbox)
	Weld.Part0 = WeldPart
	Weld.Part1 = Hitbox
	Weld.C0 = Offset

	local OverlapParams = OverlapParams.new()
	OverlapParams.FilterType = Enum.RaycastFilterType.Include
	OverlapParams.FilterDescendantsInstances = {LivingHitboxes}

	local AlreadyIncluded = Excluded

	local HitboxConnection = RunService.Stepped:Connect(function()
		for _, Object in pairs(workspace:GetPartsInPart(Hitbox, OverlapParams)) do
			local CharacterHit = HitboxModule.GetPlayerHit(Object)
			if not CharacterHit or table.find(AlreadyIncluded, CharacterHit) then
				continue
			end
			
			HitEvent:Fire(CharacterHit)
			break
		end
	end)

	--//Passing Important\\--
	self.HitEvent = HitEvent
	self.Hitbox = Hitbox
	self.HitboxConnection = HitboxConnection
	
	self.AlreadyCollidedWith = AlreadyIncluded

	return setmetatable(self, HitboxModule)
end

function HitboxModule:Blacklist(Character)
	table.insert(self.AlreadyCollidedWith, Character)
end

function HitboxModule:End()
	self.HitboxConnection:Disconnect()
	self.Hitbox:Destroy()
	self.HitEvent:Destroy()
end

return HitboxModule
