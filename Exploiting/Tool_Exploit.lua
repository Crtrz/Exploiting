local PlayerService = game:GetService("Players")
local LocalPlayer = PlayerService.LocalPlayer
local Backpack = LocalPlayer:WaitForChild("Backpack")
local Character = LocalPlayer.Character or LocalPlayer.Character.Added:Wait()

local function ParentItem(ToolToRemove, NewParent)
    task.spawn(function()
        if NewParent ~= nil then
            repeat task.wait() ToolToRemove.Parent = NewParent until ToolToRemove.Parent == NewParent
        else
            task.wait(0.25)
            ToolToRemove:Destroy()
        end
    end)
end

_G.WantedItems = {}
local function GetSpecific(BlockType)
    for Index, Tool in pairs(_G.WantedItems) do
        if Backpack:FindFirstChild(Tool) then
            table.remove(_G.WantedItems, Index)
        elseif Character:FindFirstChild(Tool) then
            table.remove(_G.WantedItems, Index)
        end
    end
        
    if not AlreadyScanning and #_G.WantedItems ~= 0 then
        AlreadyScanning = not AlreadyScanning
        local ToolConnection = Backpack.ChildAdded:Connect(function(ToolAdded)
            print(ToolAdded)
            if not table.find(_G.WantedItems, ToolAdded.Name) then
                ParentItem(ToolAdded, nil)
            else
                table.remove(_G.WantedItems, table.find(_G.WantedItems, ToolAdded.Name))
            end
        end)
        
        repeat task.wait(0.05) BlockType:FireServer() if Character:FindFirstChild("GearCount") then Character:FindFirstChild("GearCount"):Destroy() end print(#_G.WantedItems) until #_G.WantedItems == 0
        AlreadyScanning = not AlreadyScanning

        ToolConnection:Disconnect()
        
        return true
    end
end

local function AddItemsToWanted(TableOfItems, BlockType)
    local ShoundRun = false
    for Index, Item in pairs(TableOfItems) do
        if not (Character:FindFirstChild(Item) or Backpack:FindFirstChild(Item)) then
            table.insert(_G.WantedItems, Item)
            ShoundRun = true
        end
    end
    
    if ShoundRun then
        GetSpecific(BlockType)
    end
end

local function CloudInvoke(Object, Prop, Value, Tool)
    Tool['ServerControl']:InvokeServer(
    "SetProperty",
        {
            ["Value"]=Value,
            ["Property"]=Prop,
            ["Object"]=Object
        }
    )
end

--//Setup\\--
if not Character:FindFirstChild("ServerControl") then
    AddItemsToWanted({"PompousTheCloud"}, game.ReplicatedStorage.SpawnGalaxyBlock)
    
    local Cloud = Backpack:FindFirstChild("PompousTheCloud") or Character:FindFirstChild("PompousTheCloud")
    local CloudHandle = Cloud:WaitForChild("Handle")
    
    Cloud.Parent = Character
    CloudInvoke(CloudHandle:FindFirstChildOfClass("SpecialMesh"), "MeshId", "", Cloud)
    CloudInvoke(Cloud:WaitForChild("ServerControl"), "Parent", Character, Cloud)
    Cloud.Parent = Character:FindFirstChild("Humanoid")
end

local ServerControlRemote = Character

--//Commands\\--
local function Freeze(Player)
    local Accessory = Character:FindFirstChildOfClass("Accessory")
    local AccessoryHandle = Accessory:FindFirstChild("Handle")
    local AccessoryWeld = AccessoryHandle:FindFirstChild("AccessoryWeld")

    CloudInvoke(AccessoryWeld, "Part1", PlayerService[Player].Character.HumanoidRootPart, ServerControlRemote)
    CloudInvoke(AccessoryHandle, "Anchored", true, ServerControlRemote)
end

local function Kill(Player)
    local Accessory = Character:FindFirstChildOfClass("Accessory")
    local AccessoryHandle = Accessory:FindFirstChild("Handle")
    local AccessoryWeld = AccessoryHandle:FindFirstChild("AccessoryWeld")
    local CurrentWeldType = AccessoryWeld.Part1

    CloudInvoke(AccessoryWeld, "Part1", PlayerService[Player].Character.HumanoidRootPart, ServerControlRemote)
    CloudInvoke(AccessoryHandle, "CFrame", CFrame.new(0,-math.huge,0), ServerControlRemote)
    CloudInvoke(AccessoryWeld, "Part1", CurrentWeldType, ServerControlRemote)
end

local function Bring(Player)
    local Accessory = Character:FindFirstChildOfClass("Accessory")
    local AccessoryHandle = Accessory:FindFirstChild("Handle")
    local AccessoryWeld = AccessoryHandle:FindFirstChild("AccessoryWeld")
    local CurrentWeldType = AccessoryWeld.Part1
    
    CloudInvoke(AccessoryWeld, "Part1", PlayerService[Player].Character.HumanoidRootPart, ServerControlRemote)
    CloudInvoke(AccessoryHandle, "CFrame", Character.HumanoidRootPart.CFrame, ServerControlRemote)
    CloudInvoke(AccessoryWeld, "Part1", CurrentWeldType, ServerControlRemote)
end

local function Weld(Player, SecondPlayer)
    local Accessory = Character:FindFirstChildOfClass("Accessory")
    local AccessoryHandle = Accessory:FindFirstChild("Handle")
    local AccessoryWeld = AccessoryHandle:FindFirstChild("AccessoryWeld")
    
    
    CloudInvoke(AccessoryHandle, "Anchored", true, ServerControlRemote)
    CloudInvoke(AccessoryWeld, "Part1", PlayerService[Player].Character.HumanoidRootPart, ServerControlRemote)
    CloudInvoke(AccessoryWeld, "Part0", PlayerService[SecondPlayer].Character.HumanoidRootPart, ServerControlRemote)
end

local function GiveTool(Player, Tool)
    CloudInvoke(Tool, "Parent", PlayerService[Player].Character, ServerControlRemote)
end

local function MeshPart(MeshID, TextureID, Size, MeshPart)
    CloudInvoke(MeshPart, "MeshId", MeshID, ServerControlRemote)
    CloudInvoke(MeshPart, "TextureId", TextureID, ServerControlRemote)
    CloudInvoke(MeshPart, "Scale", Size, ServerControlRemote)
end

local ChangedParts = {
    ["InvisParts"] = {},
    ["MeshParts"] = {},
    ["DecalParts"] = {}
}

local function Invisible()
    for _, Part in pairs(Character:GetDescendants()) do
        if Part:IsA("BasePart") then
            ChangedParts["InvisParts"][Part] = Part.Transparency
            CloudInvoke(Part, "Transparency", 1, ServerControlRemote)
        end
        
        if Part:IsA("Mesh") or Part:IsA("SpecialMesh") then
            ChangedParts["MeshParts"][Part] = Part.MeshId
            CloudInvoke(Part, "MeshId", "", ServerControlRemote)
        end
        
        if Part:IsA("Decal") then
            ChangedParts["DecalParts"][Part] = Part.Texture
            CloudInvoke(Part, "Texture", "", ServerControlRemote)
        end
    end
end

local function Visible()
    for _, Part in pairs(Character:GetDescendants()) do
        if Part:IsA("BasePart") then
            CloudInvoke(Part, "Transparency", ChangedParts["InvisParts"][Part], ServerControlRemote)
            ChangedParts["InvisParts"][Part] = nil
        end
        
        if Part:IsA("Mesh") or Part:IsA("SpecialMesh") then
            CloudInvoke(Part, "MeshId", ChangedParts["MeshParts"][Part], ServerControlRemote)
            ChangedParts["MeshParts"][Part] = nil
        end
        
        if Part:IsA("Decal") then
            CloudInvoke(Part, "Texture", ChangedParts["DecalParts"][Part], ServerControlRemote)
            ChangedParts["DecalParts"][Part] = nil
        end
    end
end

local function GodMode(Player)
    local CurrentCFrame = Character:FindFirstChild("HumanoidRootPart").CFrame
    
    Character:FindFirstChild("HumanoidRootPart").CFrame = LocalPlayer:FindFirstChild("SpawnCFrame").Value
    CloudInvoke(Character:WaitForChild("FShield"), "Name", "CreateShield", ServerControlRemote)
    CloudInvoke(Character:FindFirstChild("CreateShield"), "Parent", PlayerService[Player].Character, ServerControlRemote)
    Character:FindFirstChild("HumanoidRootPart").CFrame = CurrentCFrame
end

local function BreakCamera(Player)
    local CurrentPosition = Character:FindFirstChild("HumanoidRootPart").CFrame
    CloudInvoke(Character:FindFirstChild("HumanoidRootPart"), "Name", "OldHumanoidRootPart", ServerControlRemote)
    
    local Connection = Backpack.ChildAdded:Connect(function(ItemAdded)
        ParentItem(ItemAdded, Character)
        
        repeat task.wait() CloudInvoke(ItemAdded:WaitForChild("Handle"), "Name", "HumanoidRootPart", ServerControlRemote) until ItemAdded:FindFirstChild("HumanoidRootPart")
        CloudInvoke(ItemAdded:WaitForChild("HumanoidRootPart"), "Anchored", true, ServerControlRemote)
        CloudInvoke(ItemAdded:WaitForChild("HumanoidRootPart"):FindFirstChildOfClass("SpecialMesh"), "MeshId", "", ServerControlRemote)
        CloudInvoke(ItemAdded:WaitForChild("HumanoidRootPart"), "Parent", PlayerService[Player].Character, ServerControlRemote)
        
        CloudInvoke(ItemAdded, "Parent", game:GetService("ReplicatedStorage"), ServerControlRemote)
        Connection:Disconnect()
    end)

    game:GetService("ReplicatedStorage").SpawnLuckyBlock:FireServer()
    CurrentPosition = Character:FindFirstChild("OldHumanoidRootPart").CFrame
    --CloudInvoke(Character:FindFirstChild("OldHumanoidRootPart"), "Name", "HumanoidRootPart", ServerControlRemote)
end

--Invisible()

Bring("HolaDigger")
AddItemsToWanted({"TwoSeaterRainbowMagicCarpet"}, game.ReplicatedStorage.SpawnGalaxyBlock)

--task.wait(2.65)
--BreakCamera("HolaDigger")
--Freeze("Ieattanksforaliving")
--GodMode("lAduritel")

--CloudInvoke(Part, "Parent", Character, ServerControlRemote)
--MeshPart("rbxassetid://6515039781", "rbxassetid://3692134820", Vector3.new(5, 5, 5), Part)
--GiveTool("lAduritel", Character:FindFirstChild("PompousTheCloud"))
